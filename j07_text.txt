Start with two arrays of strings, A and B, each with its elements in alphabetical order and without duplicates. Return a new array containing the first N elements from the two arrays. The result array should be in alphabetical order and without duplicates. A and B will both have a length which is N or more. The best "linear" solution makes a single pass over A and B, taking advantage of the fact that they are in alphabetical order, copying elements directly to the new array.


mergeTwo(["a", "c", "z"], ["b", "f", "z"], 3) → ["a", "b", "c"]
mergeTwo(["a", "c", "z"], ["c", "f", "z"], 3) → ["a", "c", "f"]
mergeTwo(["f", "g", "z"], ["c", "f", "g"], 3) → ["c", "f", "g"]
public String[] mergeTwo(String[] a, String[] b, int n) {
  String [] mergedArray=new String[2*n];
   // Copy elements from array a
  for(int i=0;i<n;i++){
    mergedArray[i]=a[i];
  }
   // Copy elements from array b
   for(int i=n;i<2*n;i++){
    mergedArray[i]=b[i-n];
  }
    // Use a TreeSet to remove duplicates and sort the array
  TreeSet<String> set = new TreeSet<>();
   // Add elements to the TreeSet
   for(int i=0;i<2*n;i++){
    set.add(mergedArray[i]);
  } // Copy sorted and unique elements from TreeSet to mergedArray
          int k=0;
        for(String s:set){
          mergedArray[k++]=s;
        }
  
 // Create an array to store the first 'n' sorted unique elements
   String [] end=new String[n];
    // Copy the first 'n' elements from the sorted set to 'end' array
  for(int i=0;i<n;i++){
    end[i]=mergedArray[i];
  }
  

return end;// Return the first 'n' unique and sorted elements
}
